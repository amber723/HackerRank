//https://www.hackerrank.com/challenges/minimum-distances

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int a[] = new int[n];
        for(int A_i=0; A_i < n; A_i++){
            a[A_i] = in.nextInt();
        }
        in.close();
        
        int res = MinDistance(a, n);
        System.out.println(res);
    }
    
    public static int MinDistance(int[] a, int n){
        int min = n;
        for(int i = 0; i < n - 1; i++){
            for(int j = i + 1; j < n; j++){
                if(a[i] == a[j]){
                    int d = j - i;
                    if(d < min) min = d;
                    break;
                }
            }
        }
        return min == n ? -1 : min;
    }
    
    //this is O(n^2), can be done within O(n) using a[100000] or HashMap
    public static int MinDistance(int[] a, int n){
        int min = n;
        for(int i = 0; i < n - 1; i++){
            for(int j = i + 1; j < n; j++){
                if(a[i] == a[j]){
                    int d = j - i;
                    if(d < min) min = d;
                    break;
                }
            }
        }
        return min == n ? -1 : min;
    }
   
}
