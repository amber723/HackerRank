import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

	static int[] getRecommendedTweets(int[][] followGraph_edges, 
			int[][] likeGraph_edges, int targetUser, int minLikeThreshold) {

		// set = a list of people the target follows;
		HashSet<Integer> set = new HashSet<>();
		set = getListOfFollows(followGraph_edges, targetUser);

		// set2 = a list of tweet IDs we would recommend.
		// we would recommend a tweet if a tweet has received enough likes from people the target follows
		HashSet<Integer> set2 = new HashSet<>();
		set2 = getListOfRecommendations(set, likeGraph_edges, minLikeThreshold);

		// convert the set of tweet IDs into an array
		int[] res = new int[set2.size()];
		int i = 0;
		for (Integer val : set2) 
			res[i++] = val;

		//sort the tweet IDs by ascending order
		Arrays.sort(res);
		return res;
	}

	static HashSet<Integer> getListOfFollows(int[][] a, int t){
		// a = followGraph_edges[][]
		// t = targetUser
		// set = a list of people the target follows;
		HashSet<Integer> set = new HashSet<>();

		for(int i = 0; i < a.length; i++){
			if(a[i][0] == t){
				set.add(a[i][1]);
			}
		}
		return set;
	}

	static HashSet<Integer> getListOfRecommendations(
			HashSet<Integer> set, int[][] a, int t){

		// s = a HashSet to store a list of tweet IDs we would recommend.
		HashSet<Integer> s = new HashSet<>();    

		// map = a HashMap to count the number of likes a tweet has received from people the target follows
		HashMap<Integer, Integer> map = new HashMap<>();  

		for(int i = 0; i < a.length; i++){
			if(set.contains(a[i][0])){            // set = a list of people the target follows
				int id = a[i][1];                 // id = tweet ID
				if(!map.containsKey(id)){
					map.put(id, 1);
				}else{
					int n = map.get(id) + 1; 
					if(n >= t)                    // t = minLikeThreshold
						s.add(id);                // add to the set if the tweet has enough likes
					map.put(id, n);
				}
			}
		}
		return s;
	} 

	public static void main(String[] args) throws IOException{
		Scanner in = new Scanner(System.in);
		final String fileName = System.getenv("OUTPUT_PATH");
		BufferedWriter bw = new BufferedWriter(new FileWriter(fileName));
		int[] res;

		String[] _followGraph_nodesm = in.nextLine().split(" ");
		int _followGraph_nodes = Integer.parseInt(_followGraph_nodesm[0]);
		int _followGraph_edges = Integer.parseInt(_followGraph_nodesm[1]);

		int[] _followGraph_from = new int[_followGraph_edges];
		int[] _followGraph_to = new int[_followGraph_edges];

		for (int _followGraph_i = 0; _followGraph_i < _followGraph_edges; _followGraph_i++) {
			String[] _followGraph_fromv = in.nextLine().split(" ");
			_followGraph_from[_followGraph_i] = Integer.parseInt(_followGraph_fromv[0]);
			_followGraph_to[_followGraph_i] = Integer.parseInt(_followGraph_fromv[1]);
		}


		String[] _likeGraph_nodesm = in.nextLine().split(" ");
		int _likeGraph_nodes = Integer.parseInt(_likeGraph_nodesm[0]);
		int _likeGraph_edges = Integer.parseInt(_likeGraph_nodesm[1]);

		int[] _likeGraph_from = new int[_likeGraph_edges];
		int[] _likeGraph_to = new int[_likeGraph_edges];

		for (int _likeGraph_i = 0; _likeGraph_i < _likeGraph_edges; _likeGraph_i++) {
			String[] _likeGraph_fromv = in.nextLine().split(" ");
			_likeGraph_from[_likeGraph_i] = Integer.parseInt(_likeGraph_fromv[0]);
			_likeGraph_to[_likeGraph_i] = Integer.parseInt(_likeGraph_fromv[1]);
		}

		// generate follow Graph
		int[][] followGraph = new int[_followGraph_edges][2];
		for (int i = 0; i < _followGraph_edges; i++) {
			followGraph[i][0] = _followGraph_from[i];
			followGraph[i][1] = _followGraph_to[i];
		}
		// generate like Graph
		int[][] likeGraph = new int[_likeGraph_edges][2];
		for (int i = 0; i < _likeGraph_edges; i++) {
			likeGraph[i][0] = _likeGraph_from[i];
			likeGraph[i][1] = _likeGraph_to[i];
		}
		int _targetUser;
		_targetUser = Integer.parseInt(in.nextLine().trim());

		int _minLikeThreshold;
		_minLikeThreshold = Integer.parseInt(in.nextLine().trim());

		res = getRecommendedTweets(followGraph, likeGraph, _targetUser, _minLikeThreshold);
		if (res == null) {
			bw.write("Null Result");
			bw.newLine();
			bw.close();
			return;
		}
		for(int res_i=0; res_i < res.length; res_i++) {
			bw.write(String.valueOf(res[res_i]));
			bw.newLine();
		}
		bw.close();
	}
}
